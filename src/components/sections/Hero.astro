---
import Container from "@/components/layout/Container.astro";
---

<section id="hero" class="h-screen w-full relative">
  <div id="hero-mask" class="h-dvh">
    <picture>
      <img
        src="/bg_image.webp"
        id="bg-img"
        alt="El camino de la vida"
        class="h-full w-full overflow-hidden object-cover opacity-90"
      />
     
    </picture>
  </div>

  <Container class="h-full absolute pt-32 pb-40 w-full inset-0 z-10">
    <div class="flex flex-col justify-between h-full px-4">
      <div class="flex flex-col gap-4">
        <h1 class="text-white font-dm text-3xl flex flex-col gap-2">
          <span class="split font-light tracking-wider">
            Despierta tu <span class="text-golden font-normal">esencia</span>
          </span>
        </h1>

        <div class="w-11/12 bg-white/60 h-px hero-divider"></div>
      </div>

      <div class="flex flex-col items-end gap-4 w-full">
        <h2
          class="text-right justify-end flex flex-wrap gap-2 font-dm border-t split pt-2 border-t-white/80 text-white/70 text-xl font-light tracking-wide leading-normal"
        >
          <span class="text-golden font-medium"> Alojamiento</span> y <span
            class="text-golden font-medium"
          >
            terapias
          </span>para tu sanación y transformación interior
        </h2>
      </div>
    </div>
  </Container>
</section>

<!-- <div class="separator w-full h-px bg-gray-900"></div> -->

<style>
  h1 > span {
    text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
    font-weight: 300;
    line-height: normal;
    letter-spacing: 1.8px;
  }

  /* .mask-logo {
    background-image: url("/Nua_Relax_Moon.svg");
    background-repeat: no-repeat;
    background-position: center center;

    background-size: clamp(20vh, 35%, 30vh);
    transition: background-position 0.5s ease-out;
    opacity: 0;
    z-index: 1;
    pointer-events: none;
    padding-bottom: calc(100dvh - 75dvh);

    & #resort-description {
      height: clamp(20vh, 35%, 30vh);
    }
  } */

  /* h1 span > span > div {
    background: linear-gradient(
      90deg,
      var(--color-golden, #be772c) 0%,
      #999 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
   
    text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);

    font-weight: 400;

    letter-spacing: 0.96px; 
  } */
  /* 
  h2 {
    text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  } */

  #hero {
    background: var(--color-gray-900);
    mask-image: url("/text.svg");

    mask-position: center center;
    mask-repeat: no-repeat;
    mask-size: clamp(4500vh, 5500%, 0vh);
    transition: mask-position 0.5s ease-out;
    mask-origin: content-box;
    background-repeat: no-repeat;
  }
</style>
<script>
  import { gsap } from "gsap";
  import { SplitText } from "gsap/SplitText";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(SplitText, ScrollTrigger);

  // Create split text for both elements
  let splits = SplitText.create(".split", { type: "words" });

  let tl = gsap.timeline({
    defaults: {
      duration: 1,
      ease: "power2.out",
    },
  });

  // Handle both single instance and array of instances
  if (Array.isArray(splits)) {
    // Animate first split (h1)
    tl.from(splits[0].words, {
      duration: 1,
      y: 20,
      filter: "blur(10px)",
      autoAlpha: 0,
      stagger: 0.1,
    })
      // Animate second split (h2) after the first one
      .from(
        splits[1].words,
        {
          duration: 1,
          y: 20,
          filter: "blur(10px)",
          autoAlpha: 0,
          stagger: 0.1,
        },
        "+=0.5",
      )
      // Add scale animation after text appears
      .to(
        "#hero",
        {
          scale: 1,
          duration: 1.5,
          ease: "power2.out",
        },
        "+=0.3",
      );
  } else {
    // Fallback for single element
    tl.from(splits.words, {
      duration: 1,
      y: 20,
      filter: "blur(10px)",
      autoAlpha: 0,
      stagger: 0.1,
    }).to(
      "#hero",
      {
        scale: 1,
        duration: 1.5,
        ease: "power2.out",
      },
      "+=0.3",
    );
  }

  let maskTl = gsap.timeline({
    ease: "power2.out",
    scrollTrigger: {
      trigger: "#hero",
      start: "top top",

      scrub: 2.5,
      end: "+=65%",
      pin: true,
      pinSpacing: false,
      pinnedContainer: "#hero",
      // pinType: "transform",
      // markers: true,
    },
  });

  const splitText = new SplitText("#accommodations-description", {
    type: "lines",
  });

  const textTl = gsap.timeline({
    default: {
      ease: "power1.in",
      scrollTrigger: {
        pin: true,
      },
    },
  });

  maskTl.add(textTl, "1");

  maskTl
    .to("#hero", {
      scale: 1,
      duration: 0.5,
    })
    .to(
      "#main-header",
      {
        background: "color-mix(in oklab, var(--color-white) 60%, transparent)",
        backdropFilter: "blur(8px)",
      },
      "-=1",
    )
    .to(
      ".logo-text, .burger-wrapper",
      {
        color: "black",
      },
      "<",
    )
    .to(
      "#main-header",
      {
        borderBottom: "1px solid var(--border) !important",
      },
      ">",
    )

    .to(
      "#bg-img",
      {
        autoAlpha: 0,
        duration: 0.3,
      },
      "<0.7",
    )

    .to(
      ".split",
      {
        autoAlpha: 0,
        duration: 0.2,
      },
      "-=1",
    )

    .to(
      ".hero-divider",
      {
        autoAlpha: 0,
        duration: 0.2,
      },
      "<",
    )

    .to(
      "#hero",
      {
        maskSize: "clamp(20vh, 60%, 30vh)",
        maskPosition: "center 25%",

        duration: 1,
      },
      0.15,
    )

    .to(
      "#hero",
      {
        pointerEvents: "none",
        duration: 0,
      },
      0.8,
    )
    .to(
      "#hero",
      {
        scale: 1,
        duration: 0.1,
      },
      "<",
    );

  textTl
    .to(
      splitText.lines[0],
      {
        marginBottom: "2rem",
      },
      "<",
    )

    .from(
      splitText.lines,
      {
        y: 20,
        opacity: 0,
        stagger: 0.2,
        filter: "blur(10px)",

        duration: 0.3,
      },
      ">",
    );

  // Handle window resize to recalculate responsive values
  let resizeTimeout: number;
  window.addEventListener("resize", () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = window.setTimeout(() => {
      // Refresh ScrollTrigger to recalculate positions
      ScrollTrigger.refresh();
    }, 250);
  });
</script>
